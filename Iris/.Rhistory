value = 3, step =1),
sliderInput(inputId = "Normal.nucleoli", label = "Normal Nucleoli:",
min = min(TrainSet$Normal.nucleoli), max = max(TrainSet$Normal.nucleoli),
value = 2, step =1),
actionButton(inputId = "submitbutton", label = "Submit", class = "btn-primary btn-lg")),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# Cl.thickness,Cell.shape,Marg.adhesion,Bare.nuclei,Bl.cromatin,Normal.nucleoli
df <- data.frame(
Name = c("Cl.thickness",
"Cell.shape",
"Marg.adhesion",
"Bare.nuclei",
"Bl.cromatin",
"Normal.nucleoli"),
Value = as.character(c(input$Cl.thickness,
input$Cell.shape,
input$Marg.adhesion,
input$Bare.nuclei,
input$Bl.cromatin,
input$Normal.nucleoli)),
stringsAsFactors = FALSE)
y <- "y"
df <- rbind(df, y)
input <- transpose(df)
print(input)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
print(test)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Prediction complete.")
} else {
return("Server is ready for prediction.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
runApp('app_slider.R')
# Import libraries
library(shiny)
library(data.table)
library(shinythemes)
# Read in the RF model
model <- readRDS("model.rds")
# Training set
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
TrainSet$y <-  as.factor(TrainSet$y)
glimpse(TrainSet)
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Prediction of Cancer Class'),
# Input values
sidebarPanel(
tags$label(h3("Input parameters")),
sliderInput(inputId = "Cl.thickness", label = "Clump Thickness:",
min = min(TrainSet$Cl.thickness), max = max(TrainSet$Cl.thickness),
value = 4, step =1),
sliderInput(inputId = "Cell.shape", label = "Uniformity of Cell Shape:",
min = min(TrainSet$Cell.shape), max = max(TrainSet$Cell.shape),
value = 3, step =1),
sliderInput(inputId = "Marg.adhesion", label = "Margin Adhesion:",
min = min(TrainSet$Marg.adhesion), max = max(TrainSet$Marg.adhesion),
value = 3, step =1),
sliderInput(inputId = "Bare.nuclei", label = "Bare Nuclei:",
min = min(TrainSet$Bare.nuclei), max = max(TrainSet$Bare.nuclei),
value = 4, step =1),
sliderInput(inputId = "Bl.cromatin", label = "Bland Chromatin:",
min = min(TrainSet$Bl.cromatin), max = max(TrainSet$Bl.cromatin),
value = 3, step =1),
sliderInput(inputId = "Normal.nucleoli", label = "Normal Nucleoli:",
min = min(TrainSet$Normal.nucleoli), max = max(TrainSet$Normal.nucleoli),
value = 2, step =1),
actionButton(inputId = "submitbutton", label = "Submit", class = "btn-primary btn-lg")),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# Cl.thickness,Cell.shape,Marg.adhesion,Bare.nuclei,Bl.cromatin,Normal.nucleoli
df <- data.frame(
Name = c("Cl.thickness",
"Cell.shape",
"Marg.adhesion",
"Bare.nuclei",
"Bl.cromatin",
"Normal.nucleoli"),
Value = as.character(c(input$Cl.thickness,
input$Cell.shape,
input$Marg.adhesion,
input$Bare.nuclei,
input$Bl.cromatin,
input$Normal.nucleoli)),
stringsAsFactors = FALSE)
y <- 2
df <- rbind(df, y)
input <- transpose(df)
print(input)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
print(test)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Prediction complete.")
} else {
return("Server is ready for prediction.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
df
y
# Import libraries
library(shiny)
library(data.table)
library(shinythemes)
# Read in the RF model
model <- readRDS("model.rds")
# Training set
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
TrainSet$y <-  as.factor(TrainSet$y)
glimpse(TrainSet)
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Prediction of Cancer Class'),
# Input values
sidebarPanel(
tags$label(h3("Input parameters")),
sliderInput(inputId = "Cl.thickness", label = "Clump Thickness:",
min = min(TrainSet$Cl.thickness), max = max(TrainSet$Cl.thickness),
value = 4, step =1),
sliderInput(inputId = "Cell.shape", label = "Uniformity of Cell Shape:",
min = min(TrainSet$Cell.shape), max = max(TrainSet$Cell.shape),
value = 3, step =1),
sliderInput(inputId = "Marg.adhesion", label = "Margin Adhesion:",
min = min(TrainSet$Marg.adhesion), max = max(TrainSet$Marg.adhesion),
value = 3, step =1),
sliderInput(inputId = "Bare.nuclei", label = "Bare Nuclei:",
min = min(TrainSet$Bare.nuclei), max = max(TrainSet$Bare.nuclei),
value = 4, step =1),
sliderInput(inputId = "Bl.cromatin", label = "Bland Chromatin:",
min = min(TrainSet$Bl.cromatin), max = max(TrainSet$Bl.cromatin),
value = 3, step =1),
sliderInput(inputId = "Normal.nucleoli", label = "Normal Nucleoli:",
min = min(TrainSet$Normal.nucleoli), max = max(TrainSet$Normal.nucleoli),
value = 2, step =1),
actionButton(inputId = "submitbutton", label = "Submit", class = "btn-primary btn-lg")),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# Cl.thickness,Cell.shape,Marg.adhesion,Bare.nuclei,Bl.cromatin,Normal.nucleoli
df <- data.frame(
Name = c("Cl.thickness",
"Cell.shape",
"Marg.adhesion",
"Bare.nuclei",
"Bl.cromatin",
"Normal.nucleoli"),
Value = as.character(c(input$Cl.thickness,
input$Cell.shape,
input$Marg.adhesion,
input$Bare.nuclei,
input$Bl.cromatin,
input$Normal.nucleoli)),
stringsAsFactors = FALSE)
y <- Class
df <- rbind(df, y)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
print(test)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Prediction complete.")
} else {
return("Server is ready for prediction.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
runApp('app_slider.R')
glimpse(TrainSet)
# Import libraries
library(shiny)
library(data.table)
library(shinythemes)
# Read in the RF model
model <- readRDS("model.rds")
# Training set
TrainSet <- read.csv("training.csv", header = TRUE)
TrainSet <- TrainSet[,-1]
TrainSet$y <-  as.factor(TrainSet$y)
glimpse(TrainSet)
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Prediction of Cancer Class'),
# Input values
sidebarPanel(
tags$label(h3("Input parameters")),
sliderInput(inputId = "Cl.thickness", label = "Clump Thickness:",
min = min(TrainSet$Cl.thickness), max = max(TrainSet$Cl.thickness),
value = 4, step =1),
sliderInput(inputId = "Cell.shape", label = "Uniformity of Cell Shape:",
min = min(TrainSet$Cell.shape), max = max(TrainSet$Cell.shape),
value = 3, step =1),
sliderInput(inputId = "Marg.adhesion", label = "Margin Adhesion:",
min = min(TrainSet$Marg.adhesion), max = max(TrainSet$Marg.adhesion),
value = 3, step =1),
sliderInput(inputId = "Bare.nuclei", label = "Bare Nuclei:",
min = min(TrainSet$Bare.nuclei), max = max(TrainSet$Bare.nuclei),
value = 4, step =1),
sliderInput(inputId = "Bl.cromatin", label = "Bland Chromatin:",
min = min(TrainSet$Bl.cromatin), max = max(TrainSet$Bl.cromatin),
value = 3, step =1),
sliderInput(inputId = "Normal.nucleoli", label = "Normal Nucleoli:",
min = min(TrainSet$Normal.nucleoli), max = max(TrainSet$Normal.nucleoli),
value = 2, step =1),
actionButton(inputId = "submitbutton", label = "Submit", class = "btn-primary btn-lg")),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server <- function(input, output, session) {
# Input Data
datasetInput <- reactive({
# Cl.thickness,Cell.shape,Marg.adhesion,Bare.nuclei,Bl.cromatin,Normal.nucleoli
df <- data.frame(
Name = c("Cl.thickness",
"Cell.shape",
"Marg.adhesion",
"Bare.nuclei",
"Bl.cromatin",
"Normal.nucleoli"),
Value = as.integer(c(input$Cl.thickness,
input$Cell.shape,
input$Marg.adhesion,
input$Bare.nuclei,
input$Bl.cromatin,
input$Normal.nucleoli)),
stringsAsFactors = FALSE)
y <- "Class"
df <- rbind(df, y)
input <- transpose(df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Prediction complete.")
} else {
return("Server is ready for prediction.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
runApp('app_slider.R')
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("model.rds")
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
numericInput("Sepal.Length",
label = "Sepal Length",
value = 5.1),
numericInput("Sepal.Width",
label = "Sepal Width",
value = 3.6),
numericInput("Petal.Length",
label = "Petal Length",
value = 1.4),
numericInput("Petal.Width",
label = "Petal Width",
value = 0.2),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
df <- data.frame(
Name = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
Value = as.character(c(input$Sepal.Length,
input$Sepal.Width,
input$Petal.Length,
input$Petal.Width)),
stringsAsFactors = FALSE)
Species <- "Species"
df <- rbind(df, Species)
input <- transpose(df)
#input <- (df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
setwd("F:/University/SEM1/CloudComputing/Assessment/Project2/TerraScope/Shiny/Iris")
# Import libraries
library(shiny)
library(data.table)
library(randomForest)
# Read in the RF model
model <- readRDS("model.rds")
####################################
# User interface                   #
####################################
ui <- pageWithSidebar(
# Page header
headerPanel('Iris Predictor'),
# Input values
sidebarPanel(
#HTML("<h3>Input parameters</h3>"),
tags$label(h3('Input parameters')),
numericInput("Sepal.Length",
label = "Sepal Length",
value = 5.1),
numericInput("Sepal.Width",
label = "Sepal Width",
value = 3.6),
numericInput("Petal.Length",
label = "Petal Length",
value = 1.4),
numericInput("Petal.Width",
label = "Petal Width",
value = 0.2),
actionButton("submitbutton", "Submit",
class = "btn btn-primary")
),
mainPanel(
tags$label(h3('Status/Output')), # Status/Output Text Box
verbatimTextOutput('contents'),
tableOutput('tabledata') # Prediction results table
)
)
####################################
# Server                           #
####################################
server<- function(input, output, session) {
# Input Data
datasetInput <- reactive({
df <- data.frame(
Name = c("Sepal Length",
"Sepal Width",
"Petal Length",
"Petal Width"),
Value = as.character(c(input$Sepal.Length,
input$Sepal.Width,
input$Petal.Length,
input$Petal.Width)),
stringsAsFactors = FALSE)
Species <- "Species"
df <- rbind(df, Species)
input <- transpose(df)
#input <- (df)
write.table(input,"input.csv", sep=",", quote = FALSE, row.names = FALSE, col.names = FALSE)
test <- read.csv(paste("input", ".csv", sep=""), header = TRUE)
Output <- data.frame(Prediction=predict(model,test), round(predict(model,test,type="prob"), 3))
print(Output)
})
# Status/Output Text Box
output$contents <- renderPrint({
if (input$submitbutton>0) {
isolate("Calculation complete.")
} else {
return("Server is ready for calculation.")
}
})
# Prediction results table
output$tabledata <- renderTable({
if (input$submitbutton>0) {
isolate(datasetInput())
}
})
}
####################################
# Create the shiny app             #
####################################
shinyApp(ui = ui, server = server)
